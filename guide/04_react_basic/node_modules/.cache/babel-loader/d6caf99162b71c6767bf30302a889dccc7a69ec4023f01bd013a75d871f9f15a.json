{"ast":null,"code":"var _jsxFileName = \"/Users/shiyo/React/guide/04_react_basic/src/090_props/start/components/Child.js\";\n/* POINT 式と文\n式：何らかの値を返すもの（変数に代入できるもの）\n文：変数宣言、for文、if文、switch文やセミコロンで区切るもの。\n*/\n\nimport \"./Child.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Child = _ref => {\n  let {\n    color: c = 'green',\n    num,\n    fn,\n    bool,\n    obj\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `component ${c}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Hello Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: num\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: fn('test')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: bool ? 'true' : 'false'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_c = Child;\nexport default Child;\n\n// propsの仕組みは親要素でpropsを定義、今回の場合だとcolor=\"red\"\n// propsの分割代入で{color}とすることでcolorを取得 classNameでcolorと定義することで\n// 新たなredというクラス名が追加される。cssで指定しているので異なる値が設定できる\n// color : c のようにcolorというプロパティ名を利用したくない場合は右のような記述を行うことでcという値を利用できるようになる\nvar _c;\n$RefreshReg$(_c, \"Child\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","Child","_ref","color","c","num","fn","bool","obj","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shiyo/React/guide/04_react_basic/src/090_props/start/components/Child.js"],"sourcesContent":["/* POINT 式と文\n式：何らかの値を返すもの（変数に代入できるもの）\n文：変数宣言、for文、if文、switch文やセミコロンで区切るもの。\n*/\n\nimport \"./Child.css\";\n\nconst Child = ({color : c = 'green' , num , fn, bool,obj}) => {\n  return (\n    <div className={`component ${c}`}>\n      <h3>Hello Component</h3>\n      <h3>{num}</h3>\n      <h3>{fn('test')}</h3>\n      <h3>{bool ? 'true':'false'}</h3>\n      \n    </div>\n  );\n};\n\nexport default Child;\n\n// propsの仕組みは親要素でpropsを定義、今回の場合だとcolor=\"red\"\n// propsの分割代入で{color}とすることでcolorを取得 classNameでcolorと定義することで\n// 新たなredというクラス名が追加される。cssで指定しているので異なる値が設定できる\n// color : c のようにcolorというプロパティ名を利用したくない場合は右のような記述を行うことでcという値を利用できるようになる"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA,OAAO,aAAa;AAAC,SAAAA,MAAA,IAAAC,OAAA;AAErB,MAAMC,KAAK,GAAGC,IAAA,IAAgD;EAAA,IAA/C;IAACC,KAAK,EAAGC,CAAC,GAAG,OAAO;IAAGC,GAAG;IAAGC,EAAE;IAAEC,IAAI;IAACC;EAAG,CAAC,GAAAN,IAAA;EACvD,oBACEF,OAAA;IAAKS,SAAS,EAAG,aAAYL,CAAE,EAAE;IAAAM,QAAA,gBAC/BV,OAAA;MAAAU,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBd,OAAA;MAAAU,QAAA,EAAKL;IAAG;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACdd,OAAA;MAAAU,QAAA,EAAKJ,EAAE,CAAC,MAAM;IAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrBd,OAAA;MAAAU,QAAA,EAAKH,IAAI,GAAG,MAAM,GAAC;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE7B,CAAC;AAEV,CAAC;AAACC,EAAA,GAVId,KAAK;AAYX,eAAeA,KAAK;;AAEpB;AACA;AACA;AACA;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}