{"ast":null,"code":"var _jsxFileName = \"/Users/shiyo/React/guide/06_control_and_form/src/060_conditional_render/start/Example.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Example = () => {\n  _s();\n  const animals = [\"Dog\", \"Cat\", null, \"Rat\"];\n  const [filterVal, setFilterVal] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: filterVal,\n      onChange: e => setFilterVal(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: animals.filter(animal => {\n        const animalStr = animal;\n        const isMatch = animal.indexOf(filterVal) !== -1;\n        console.log(animal.indexOf(filterVal));\n        return isMatch;\n      }).map(animal => {\n        var _ref;\n        // 三項演算子\n        // return <li key={animal}>{animal === \"Dog\" ? animal+\"⭐️\": animal}</li>\n\n        // 真偽地\n        // return <li key={animal}>{animal}{(animal === \"Dog\" && \"⭐️\")}</li>\n\n        // null型演算子\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [animal, (_ref = animal === \"Dog\") !== null && _ref !== void 0 ? _ref : \"⭐️\"]\n        }, animal, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 20\n        }, this);\n\n        // if文\n        // if(animal === 'Dog'){\n        //   return <li key={animal}>{animal + \"☆\"}</li>\n        // }else{\n        //   return <li key={animal}>{animal}</li>\n        // }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Example, \"KGM+Ikm59FQGD6w+AMK352BswOM=\");\n_c = Example;\nexport default Example;\n\n// 現在のプログラムにも真偽地自体は存在しているが、画面上には表示されない仕組みになっているので\n// 表示させる方法もある\nvar _c;\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Example","_s","animals","filterVal","setFilterVal","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","filter","animal","animalStr","isMatch","indexOf","console","log","map","_ref","_c","$RefreshReg$"],"sources":["/Users/shiyo/React/guide/06_control_and_form/src/060_conditional_render/start/Example.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst Example = () => {\n  const animals = [\"Dog\", \"Cat\",null, \"Rat\"];\n\n  const [filterVal, setFilterVal] = useState(\"\");\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={filterVal}\n        onChange={(e) => setFilterVal(e.target.value)}\n      />\n      <ul>\n        {animals\n          .filter((animal) => {\n            const animalStr = animal\n            const isMatch = animal.indexOf(filterVal) !== -1;\n            console.log(animal.indexOf(filterVal));\n            return isMatch;\n          })\n          .map((animal) => {\n            // 三項演算子\n            // return <li key={animal}>{animal === \"Dog\" ? animal+\"⭐️\": animal}</li>\n\n            // 真偽地\n            // return <li key={animal}>{animal}{(animal === \"Dog\" && \"⭐️\")}</li>\n\n            // null型演算子\n            return <li key={animal}>{animal}{animal===\"Dog\"?? \"⭐️\"}</li>\n\n            // if文\n            // if(animal === 'Dog'){\n            //   return <li key={animal}>{animal + \"☆\"}</li>\n            // }else{\n            //   return <li key={animal}>{animal}</li>\n            // }\n          })}\n      </ul>\n    </>\n  );\n};\n\nexport default Example;\n\n\n// 現在のプログラムにも真偽地自体は存在しているが、画面上には表示されない仕組みになっているので\n// 表示させる方法もある"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,OAAO,GAAG,CAAC,KAAK,EAAE,KAAK,EAAC,IAAI,EAAE,KAAK,CAAC;EAE1C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE9C,oBACEE,OAAA,CAAAE,SAAA;IAAAM,QAAA,gBACER,OAAA;MACES,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEJ,SAAU;MACjBK,QAAQ,EAAGC,CAAC,IAAKL,YAAY,CAACK,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACFjB,OAAA;MAAAQ,QAAA,EACGH,OAAO,CACLa,MAAM,CAAEC,MAAM,IAAK;QAClB,MAAMC,SAAS,GAAGD,MAAM;QACxB,MAAME,OAAO,GAAGF,MAAM,CAACG,OAAO,CAAChB,SAAS,CAAC,KAAK,CAAC,CAAC;QAChDiB,OAAO,CAACC,GAAG,CAACL,MAAM,CAACG,OAAO,CAAChB,SAAS,CAAC,CAAC;QACtC,OAAOe,OAAO;MAChB,CAAC,CAAC,CACDI,GAAG,CAAEN,MAAM,IAAK;QAAA,IAAAO,IAAA;QACf;QACA;;QAEA;QACA;;QAEA;QACA,oBAAO1B,OAAA;UAAAQ,QAAA,GAAkBW,MAAM,GAAAO,IAAA,GAAEP,MAAM,KAAG,KAAK,cAAAO,IAAA,cAAAA,IAAA,GAAG,IAAI;QAAA,GAAtCP,MAAM;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAqC,CAAC;;QAE5D;QACA;QACA;QACA;QACA;QACA;MACF,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA,eACL,CAAC;AAEP,CAAC;AAACb,EAAA,CAxCID,OAAO;AAAAwB,EAAA,GAAPxB,OAAO;AA0Cb,eAAeA,OAAO;;AAGtB;AACA;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}